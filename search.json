[{"path":[]},{"path":"/articles/testandrollvignette.html","id":"about-test-roll","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 About Test & Roll","title":"Test and Roll Package Vignette","text":"Test & Roll Package implements methods paper “Profit-maximizing /b tests” Elea McDonnell Feit Ron Berman.Source: Feit, E. M. & Berman, R. (2018). Profit-maximizing /b tests. Available SSRN. Test & Roll (tactical /B testing) describes experimentation process marketing subset customers randomly assigned treatment customer response data first collected “test” stage. “roll” stage follows, marketers deploy one treatment remaining customers based test results. Marketers often use /B testing tool compare marketing treatments test stage deploy better-performing treatment remainder consumer population. tests traditionally analyzed using hypothesis testing, re-frame explicit trade-opportunity cost test (customers receive sub-optimal treatment) potential losses associated deploying sub-optimal treatment remainder population. Profit-maximizing Test & Roll several advantages traditional hypothesis testing (see paper ). (1) typical significance levels (alpha) hypothesis tests aim limit Type errors little consequence profit, assuming deployment costs. null mistakenly rejected, treatments yield identical effects, profit earned regardless treatment deployed. profit trade-test-stage learning roll-stage earning, conservative sample sizes based null hypothesis testing lower overall expected profit, exposing many people less effective treatment test. (2) population available testing deploying often limited, recommended sample size take constraint account. online advertising experiments effects often small (profitable), recommended sample size may larger size population . Yet population limited, smaller tests never reach statistical significance can still substantial benefit improving expected profit. profit-maximizing test roll, improved performance achieved profit-maximizing tests identify best performing treatment high probability treatment effects large; lost profit (regret) errors treatment selection small treatment effects small. Test & Roll package can used calculate test sizes well resulting profits variety methods (hypothesis testing, profit-maximization, Thomson Sampling). Note profit-maximizing test size substantially smaller typically recommended hypothesis test, particularly response noisy total population small.","code":""},{"path":"/articles/testandrollvignette.html","id":"installation","dir":"Articles","previous_headings":"1. Introduction","what":"1.2 Installation","title":"Test and Roll Package Vignette","text":"","code":"library(devtools) install_github('testandroll/testandroll.pkg') library(testandroll.pkg) #Extra installations for Rmd to knit install.packages('doParallel', repos='http://cran.us.r-project.org') ##  ## The downloaded binary packages are in ##  /var/folders/49/6l50y03s1rj1g1yd2h6jz2lc0000gn/T//Rtmp6yllQ3/downloaded_packages library(doParallel) registerDoParallel(cores=4) #Determine the the number of cores to use for parallel execution (e.g., 4)"},{"path":"/articles/testandrollvignette.html","id":"computing-priors-from-data","dir":"Articles","previous_headings":"1. Introduction","what":"1.3 Computing priors from data","title":"Test and Roll Package Vignette","text":"Basic method: Priors represent beliefs data conduct experiment. testandroll package contains sample data proportions customers visited website longer 15 minutes. months.means vector length 12 containing average proportions month. find “\\(\\mu\\),” simply take means mean responses data sets find “\\(\\sigma\\),” simply take standard deviation mean responses.","code":"months.means ##   January  February     March     April       May      June      July    August  ## 0.6103005 0.4089727 0.5021437 0.6009944 0.6053015 0.5904040 0.6090105 0.5090350  ## September   October  November  December  ## 0.4078861 0.4967330 0.5061300 0.6154330 mu <- mean(months.means) sigma <- sd(months.means) mu ## [1] 0.5385287 sigma ## [1] 0.077417"},{"path":"/articles/testandrollvignette.html","id":"summary-of-functions","dir":"Articles","previous_headings":"1. Introduction","what":"1.4 Summary of functions","title":"Test and Roll Package Vignette","text":"Function parameters: “n” - sample sizes “N” - total deployment population “s” - known standard deviations outcome “\\(\\mu\\)” - means priors response “\\(\\sigma\\)” - standard deviations priors response “K” - number arms (treatments) “R” - number simulation repetitions “\\(n_{vals}\\)” - possible sample size values Function purposes:Usage 2-arm tests test_size_nht() - computes test sizes hypothesis testing test_size_nn() - computes profit-maximizing test sizes test & roll profit_nn() - computes profit profit-maximizing tests profit_perfect_nn() - computes profit perfect information error_rate_nn() - computes rate incorrect deployments Usage K-arm tests (simulation) test_size_nn_sim() - computes profit-maximizing test sizes multi-armed test roll one_rep_test_size() - utility function used test_size_nn_sim() simulate one set potential outcomes profit_nn_sim() - computes per-customer profit test & roll K arms one_rep_profit() - utility function used function ‘profit_nn_sim()’ simulate one set potential outcomes test_eval_nn() - provides summary statistics test roll plan Section 4) Visualizing prior effects profits mean response plot_prior_mean_resp_nn() - plot prior densities mean response (profit per customer) plot_prior_resp_nn() - plot prior densities response (profit per customer) plot_prior_effect_nn() - plot prior densities treatment effect (difference profit per customer)","code":""},{"path":[]},{"path":"/articles/testandrollvignette.html","id":"computing-profit-maximizing-test-sizes-2-arm-tests","dir":"Articles","previous_headings":"2. Usage for 2-arm tests","what":"2.1 Computing profit-maximizing test sizes (2-arm tests)","title":"Test and Roll Package Vignette","text":"test_size_nht() computes test sizes hypothesis testing. Takes parameters: “s” - vector length 1 (symmetric) 2 (asymmetric) indicating response standard deviation(s) “d” - minimum detectable difference treatments “conf” - 1 - type error rate “power” - 1 - type II error rate “N” - finite deployment population, NULL finite population correction usedand returns vector containing recommended sample sizes symmetric case \\(s_1=s_2=s\\), recommended sample size calculated using \\(n_1 = n_2 \\approx (z_{1-\\alpha/2} + z_\\beta)^2 (\\frac{2 s^2}{d^2})\\) \\(\\alpha\\) 1-conf \\(\\beta\\) power. asymmetric case \\(s_1 \\neq s_2\\), recommended sample sizes calculated using \\(n_1=(z_{1-\\alpha/2} + z_\\beta)^2 (\\frac{{s_1}^2+s_1s_2}{d^2})\\) \\(n_2=(z_{1-\\alpha/2} + z_\\beta)^2 (\\frac{s_1s_2+{s_2}^2}{d^2})\\). finite population correction, \\(n_1=\\frac{(z_{1-\\alpha/2} + z_\\beta)^2 (N) (s_1^2+s_1 s_2)}{d^2 (N-1)+(z_{1-\\alpha/2} + z_\\beta)^2(s_1+s_2)^2}\\) \\(n_1=\\frac{(z_{1-\\alpha/2} + z_\\beta)^2 (N) (s_1 s_2+s_2^2)}{d^2 (N-1)+(z_{1-\\alpha/2} + z_\\beta)^2(s_1+s_2)^2}\\) test_size_nn() computes profit-maximizing test size test roll 2 arms Takes parameters: “N” - size deployment population “s” - vector length 2 containing standard deviations outcome “\\(\\mu\\)” - vector length 2 containing means prior mean response “\\(\\sigma\\)” vector length 2 containing standard deviations prior mean responseand returns vector containing sample sizes symmetric case \\(s_1=s_2=s\\), recommended sample size calculated using \\(n_1=n_1= \\frac{\\sqrt{9\\sigma^4 + 4 n \\sigma^2 \\sigma_0^2} - \\frac{3}{4} \\sigma^2}{4\\sigma_0^2}\\). asymmetric case, recommended sample size calculated using optim() function find sample sizes maximize profit_nn().","code":"test_size_nht(s=c(0.5,0.10), d=0.2, conf=0.95, power=0.8, N=NULL) ## [1] 58.86660 11.77332 test_size_nht(s=0.5, d=0.2, conf=0.95, power=0.8, N=NULL) ## [1] 98.111 test_size_nn(N=10000, s=.1, mu=c(.7,.7), sigma=c(.05,.05)) ## [1] 97.04499 97.04499 test_size_nn(N=10000, s=c(.1,.2), mu=c(.7,.7), sigma=c(.05,.05)) ## [1]  97.38121 187.41676"},{"path":"/articles/testandrollvignette.html","id":"computing-profits-and-errors-under-different-testing-methods-2-arm-tests","dir":"Articles","previous_headings":"2. Usage for 2-arm tests","what":"2.2 Computing profits and errors under different testing methods (2-arm tests)","title":"Test and Roll Package Vignette","text":"profit_nn() computes per-customer profit test & roll 2 arms Takes parameters: “n” - vector length 2 containing sample sizes “N” - size deployment population “s” - vector length 2 containing known standard deviations outcome “\\(\\mu\\)” - vector length 2 containing means prior mean response “\\(\\sigma\\)” - vector length 2 containing standard deviations prior mean response “log_n” - whether log(n) input rather n (avoid negative solutions), ‘TRUE’ ‘FALSE’returns numeric per-customer profit N customers symmetric case, deploy stage profit calculated using \\((N - n_1 - n_2) \\left[ \\mu + \\frac{\\sqrt{2} \\sigma^2}{\\sqrt{\\pi} \\sqrt{2\\sigma^2 + \\frac{n_1 + n_2}{n_1 n_2}s^2} }\\right]\\) test stage profit calculated \\(\\mu_1(n_1+n_2)\\). asymmetric case, deploy stage profit calculated using \\((N-n_1-n_2) \\left[\\mu_1 + e\\Phi\\left(\\frac{e}{v}\\right) + v\\phi\\left(\\frac{e}{v}\\right)\\right]\\) \\(e=(\\mu_2 - \\mu_1)\\) \\(v = \\sqrt{\\frac{\\sigma_1^4}{\\sigma_1^2+s_1^2/n_1}+\\frac{\\sigma_2^4}{\\sigma_2^2+s_2^2/n_2}}\\). test stage profit \\(\\mu_1n_1 + \\mu_2n_2\\) profit_perfect_nn() computes profit perfect information Takes parameters: “\\(\\mu\\)” - means prior mean response “\\(\\sigma\\)” - standard deviations prior mean responseand returns numeric per-customer profit perfect information symmetric case, perfect information profit calculated using \\(\\left(\\mu + \\frac{\\sigma}{\\sqrt{\\pi}}\\right) N\\). asymmetric case yet implemented. error_rate_nn() computes rate incorrect deployments Takes parameters: “n” - vector length 2 containing sample sizes “s” - vector length 1 (symmetrical) containing standard deviations outcome “\\(\\sigma\\)” - vector length 1 (symmetrical) containing standard deviations prior mean responseand returns numeric error rate symmetric normal priors, error rate calculated using \\(\\frac{1}{4} - \\frac{1}{2 \\pi}\\arctan\\left(\\frac{\\sqrt{2}\\sigma}{s} \\sqrt{\\frac{n_1 n_2}{n_1+n_2}}\\right)\\). asymmetric case yet implemented.","code":"profit_nn(n=100, N=10000, s=.1, mu=c(.7,.5), sigma=c(.2,.2)) ## [1] 0.8104432 profit_nn(n=c(100,200), N=10000, s=.1, mu=c(.7,.5), sigma=c(.2,.2)) ## [1] 0.8093503 profit_perfect_nn(mu=.7, sigma=.02) ## [1] 0.7112838 error_rate_nn(n=100, s=.5, sigma=.2) ## [1] 0.07797913 error_rate_nn(n=c(100,200), s=.5, sigma=.2) ## [1] 0.0678686"},{"path":[]},{"path":"/articles/testandrollvignette.html","id":"computing-profit-maximizing-test-sizes-k-arm-tests-with-simulation","dir":"Articles","previous_headings":"3. Usage for K-arm tests (with simulation)","what":"3.1 Computing profit-maximizing test sizes (K-arm tests) with simulation","title":"Test and Roll Package Vignette","text":"test_size_nn_sim() Computes profit-maximizing test size profits multi-armed test & roll Takes parameters: “N” - deployment population “s” - standard deviations response (length 1(symmetric) K) “\\(\\mu\\)” - vector length K containing means priors mean response “\\(\\sigma\\)” - vector length K containing standard deviations priors mean response “K” - number arms (treatments) “R” - number simulation replicationsand returns list sample sizes expected profit per customer symmetric case, function creates vector containing possible values n (floor(N/K)-1). , one_rep_test_size() used calculate profits values n. values n maximize profit chosen sample sizes particular repetition. asymmetric case yet implemented. one_rep_test_size() (utility function test_size_nn_sim()) simulates one set potential outcomes Takes parameters: “\\(n_{vals}\\)” - potential values n “N” - deployment population “s” - standard deviations outcome (vector length 1 K) “\\(\\mu\\)” - means priors mean response (vector length 1 K) “\\(\\sigma\\)” - standard deviations priors mean response (vector length 1 K) “K” - number arms (treatments)returns 2-column matrix values n first column profits second column function picks true mean arm simulates N observations K arms based mean. , arm highest posterior mean chosen profit calculated potential value n (n_vals).","code":"test_size_nn_sim(N=1000, s=.1, mu=.1, sigma=.05, K=2, R=1000) ## $n ## [1] 22 22 ##  ## [[2]] ## [1] 0.1234488 one_rep_test_size(1:(floor(10/2)-1), N=10, s=10, mu= 20, sigma=10, K=2) ##      n   profit ## [1,] 1 220.4618 ## [2,] 2 206.4567 ## [3,] 3 178.1974 ## [4,] 4 163.6219"},{"path":"/articles/testandrollvignette.html","id":"computing-profits-and-errors-under-different-testing-methods-k-arm-tests-with-simulation","dir":"Articles","previous_headings":"3. Usage for K-arm tests (with simulation)","what":"3.2 Computing profits and errors under different testing methods (K-arm tests) with simulation","title":"Test and Roll Package Vignette","text":"profit_nn_sim() computes per-customer profit test & roll K arms Takes parameters: “n” - sample sizes test & roll (vector length 1 K) “N” - deployment population “s” - standard deviations outcome (vector length 1 K) “\\(\\mu\\)” - means priors mean response (vector length 1 K) “\\(\\sigma\\)” - standard deviations priors mean response (vector length 1 K) “K” - number arms (2 default) “TS” - whether run Thomson sampling, ‘TRUE’ ‘FALSE’ (FALSE default) “R” - number simulation replications (1000 default)returns list containing profit, regret, error rates function uses one_rep_profit() simulate repetition. , summary values combined list. test_size_nn() test_size_nn_sim() can used find profit-maximizing sample sizes (n) input function. one_rep_profit() (utility function profit_nn_sim()) simulates one set potential outcomes,  draws true mean arm generates N observations arm Takes parameters: “n” - sample sizes test & roll (vector length 1 K) “N” - deployment population “s” - standard deviations outcome (vector length 1 K) “\\(\\mu\\)” - means priors mean response (vector length 1 K) “\\(\\sigma\\)” - standard deviations priors mean response (vector length 1 K) “K” - number arms (2 default) “TS” - whether run Thomson sampling, ‘TRUE’ ‘FALSE’ (FALSE default)returns profits error rates perfect information, test & roll, Thomson sampling one simulation  function draws true mean arm based sigma simulates N observations K arms. profit perfect information calculated picking arms highest true mean. Test roll profit calculated summing profit first n observations arm (test stage) profit selected arm (roll stage remainder population). Thomson Sampling, mu sigma updated every K observations (1 arm). test_eval_nn() provides summary test & roll plan Takes parameters: “n” - sample sizes test & roll (vector length 2) “N” - deployment population “s” - standard deviations outcome (vector length 2) “\\(\\mu\\)” - means priors mean response (vector length 2) “\\(\\sigma\\)” - standard deviations priors mean response (vector length 2)returns data frame containing summary statistics profit per customer, profits test phase, error rates, etc. symmetric case, total profit calculated using profit_nn()*N profit_per_cust becomes total profit/N. profit_test calculated using \\[\\mu*(n_1+n_2)\\]. profit_deploy total profit - profit_test. profit_rand (random selection) calculated using \\[mu*N\\]. profit_perfect calculated using profit_perfect_nn() function. profit_gain simply total profit - profit_rand. regret 1 - total profit/profit_perfect represents % lost potential profit. error_rate calculated part profit_nn_sim(). asymmetric case, results differ profit_test becoming \\[\\mu_1*n_1+\\mu_1*n_2\\] profit_rand becoming \\[(\\mu_1+\\mu_2)*.5*N\\].","code":"profit_nn_sim(n=c(100,200,300), N=1000, s=c(.1,.2,.3), mu=c(.1,.2,.3), sigma=c(.01,.03,.05), K=3, TS=FALSE, R=10) ## $profit ##            perfect_info test_roll thom_samp ## exp_profit    0.3082823 0.2659775        NA ## 5%            0.2164081 0.2010297        NA ## 95%           0.3931500 0.3172994        NA ##  ## $regret ##            perfect_info  test_roll thom_samp ## exp_regret            0 0.12494950        NA ## 5%                    0 0.01470893        NA ## 95%                   0 0.19285484        NA ##  ## $error_rate ## [1] 0.2 ##  ## $profit_draws ##    perfect_info test_roll thom_samp error ## 1      403.5256  324.7588        NA     0 ## 2      223.3182  206.7178        NA     1 ## 3      222.6138  196.3757        NA     0 ## 4      352.4217  298.2236        NA     0 ## 5      261.9600  238.3319        NA     0 ## 6      211.3307  218.5320        NA     1 ## 7      364.3239  306.3331        NA     0 ## 8      380.4687  308.1824        NA     0 ## 9      338.1711  284.1953        NA     0 ## 10     324.6891  278.1243        NA     0 ##  ## $regret_draws ##    perfect_info   test_roll thom_samp ## 1             0  0.19519648        NA ## 2             0  0.07433492        NA ## 3             0  0.11786358        NA ## 4             0  0.15378757        NA ## 5             0  0.09019733        NA ## 6             0 -0.03407598        NA ## 7             0  0.15917376        NA ## 8             0  0.18999284        NA ## 9             0  0.15961096        NA ## 10            0  0.14341350        NA one_rep_profit(n=c(100,100), N=1000, s=c(.1,.1), mu=c(.1,.1), sigma=c(.05,.05), K=2, TS=FALSE) ## perfect_info    test_roll    thom_samp        error  ##     121.6119     121.7183           NA       0.0000 one_rep_profit(n=c(100,200,300), N=1000, s=c(.1,.2,.3), mu=c(.1,.2,.3), sigma=c(.01,.03,.05), K=3, TS=FALSE) ## perfect_info    test_roll    thom_samp        error  ##     306.4797     252.0384           NA       0.0000 test_eval_nn(n=c(100,100), N=1000, s=.1, mu=.1, sigma=.05) ##    n1  n2 profit_per_cust   profit profit_test profit_deploy profit_rand ## 1 100 100       0.1221293 122.1293          20      102.1293         100 ##   profit_perfect profit_gain     regret error_rate tie_rate ## 1       128.2095   0.7844645 0.04742351 0.06283296        0 test_eval_nn(n=c(100,200), N=1000, s=c(.1,.2), mu=c(.1,.2), sigma=c(.05,.1)) ##    n1  n2 profit_per_cust   profit profit_test profit_deploy profit_rand ## 1 100 200       0.1976957 197.6957          50      147.6957         150 ##   profit_perfect profit_gain     regret error_rate tie_rate ## 1       212.1578   0.7673316 0.06816699     0.0317        0"},{"path":"/articles/testandrollvignette.html","id":"visualizing-prior-effects-on-profits-and-mean-response","dir":"Articles","previous_headings":"","what":"4. Visualizing prior effects on profits and mean response","title":"Test and Roll Package Vignette","text":"plot_prior_mean_resp_nn() plots prior densities mean response (profit per customer)  takes parameters: “\\(\\mu\\)” - means prior mean response “\\(\\sigma\\)” - standard deviations priors responseand returns plot prior density mean response plot_prior_resp_nn() plot prior densities response (profit per customer)  takes parameters: “s” - known standard deviations outcome “\\(\\mu\\)” - means prior mean response “\\(\\sigma\\)” - standard deviations priors responseand returns plot prior density response plot_prior_effect_nn() plots prior densities treatment effect (difference profit per customer)  takes parameters: “\\(\\mu\\)” - means prior mean response “\\(\\sigma\\)” - standard deviations priors response “abs” - whether take absolute difference, ‘TRUE’ ‘FALSE’returns plot prior density treatment effect","code":"plot_prior_mean_resp_nn(mu=c(5,10), sigma=c(10,10)) plot_prior_resp_nn(s=c(10,20), mu=c(5,10), sigma=c(10,10)) plot_prior_effect_nn(mu=c(5,10), sigma=c(10,10), abs=FALSE)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ron Berman. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Feit, M. E, Berman, R. (2022). testandroll.pkg: Test &amp; Roll: experimental design maximize profit /B Tests. R package version 0.1.0.","code":"@Manual{,   title = {testandroll.pkg: Test & Roll: An experimental design to maximize profit from A/B Tests},   author = {{Feit} and E. M. and {Berman} and {R.}},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"about-test--roll","dir":"","previous_headings":"","what":"Test & Roll: An experimental design to maximize profit from A/B Tests","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"Test Roll Package implements methods paper “Profit-maximizing /b tests” Elea McDonnell Feit Ron Berman.Source: Feit, E. M., & Berman, R. (2018). Profit-maximizing /b tests. Available SSRN.  test roll, assume marketer plans test two marketing treatments, labeled 1 2 sample sizes n_1 n_2 customers. marketer deploys treatment performs better test remaining n - n_1 - n_2 customers. “Profit-maximizing /b tests” frame test roll terms equations profit rather traditional hypothesis testing.","code":""},{"path":"/index.html","id":"variable-names","dir":"","previous_headings":"","what":"Variable Names","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"“n” - sample sizes “N” - total deployment population “s” - known standard deviations outcome “mu” - means priors response “sigma” - standard deviations priors response “K” - number arms (treatments) “R” - number simulation repetitions “n_vals” - possible sample size values","code":""},{"path":"/index.html","id":"functionalities","dir":"","previous_headings":"","what":"Functionalities","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"Note asymmetric cases yet implemented","code":""},{"path":"/index.html","id":"usage-for-2-arm-tests","dir":"","previous_headings":"","what":"Usage for 2-arm tests","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"Compute test sizes hypothesis testing Compute test sizes maximize profit Compute profit profit-maximizing tests Compute profit perfect information Compute error rate","code":""},{"path":"/index.html","id":"usage-for-k-arm-tests","dir":"","previous_headings":"","what":"Usage for K-arm tests","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"Note require simulation * Compute profit-maximizing test-sizes * Compute profits test roll given test sizes * Compute summary statistics test roll plan","code":""},{"path":"/index.html","id":"visualizing-prior-effects-on-profits-and-mean-response","dir":"","previous_headings":"","what":"Visualizing prior effects on profits and mean response","title":"Test & Roll: An experimental design to maximize profit from A/B Tests","text":"Graph prior densities vs. response treatment effects","code":""},{"path":"/reference/error_rate_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","title":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","text":"Computes rate incorrect deployments symmetric normal priors response normal symmetric normal priors","code":""},{"path":"/reference/error_rate_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","text":"","code":"error_rate_nn(n, s, sigma)"},{"path":"/reference/error_rate_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","text":"n vector length 2 containing sample sizes s vector length 1 (symmetrical) containing standard deviations outcome sigma vector length 1 (symmetrical) containing standard deviations prior mean response","code":""},{"path":"/reference/error_rate_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","text":"rate incorrect deployments","code":""},{"path":"/reference/error_rate_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the rate of incorrect deployments with symmetric normal priors\nWhere response is normal with symmetric normal priors — error_rate_nn","text":"","code":"error_rate_nn(n=100, s=.5, sigma=.2) #> [1] 0.07797913 error_rate_nn(n=c(100,200), s=.5, sigma=.2) #> [1] 0.0678686"},{"path":"/reference/months.means.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data means — months.means","title":"Sample data means — months.means","text":"average proportion customers stayed website longer 5 minutes month.","code":""},{"path":"/reference/months.means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data means — months.means","text":"","code":"months.means"},{"path":"/reference/months.means.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data means — months.means","text":"vector length 12","code":""},{"path":"/reference/months.sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data standard deviations — months.sd","title":"Sample data standard deviations — months.sd","text":"standard deviations proportion customers stayed website longer 5 minutes month.","code":""},{"path":"/reference/months.sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data standard deviations — months.sd","text":"","code":"months.sd"},{"path":"/reference/months.sd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data standard deviations — months.sd","text":"vector length 12","code":""},{"path":"/reference/one_rep_profit.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","title":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","text":"Utility function used function 'profit_nn_sim()' simulate one set potential outcomes Draws true mean arm generates N observations arm Returns profits error rates perfect information, test & roll, Thomson sampling","code":""},{"path":"/reference/one_rep_profit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","text":"","code":"one_rep_profit(n, N, s, mu, sigma, K, TS = FALSE)"},{"path":"/reference/one_rep_profit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","text":"n vector length K containing sample sizes N deployment population s vector length K containing standard deviations outcome mu vector length K containing means prior mean response sigma vector length K containing standard deviations prior mean response K number arms (treatments) TS whether run Thomson sampling, 'TRUE' 'FALSE'","code":""},{"path":"/reference/one_rep_profit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","text":"profits error rates perfect information, test & roll, Thomson sampling one simulation","code":""},{"path":"/reference/one_rep_profit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function used in function 'profit_nn_sim()' to simulate one set of potential outcomes\nDraws a true mean for each arm and generates N observations from each arm\nReturns profits and error rates under perfect information, test & roll, and Thomson sampling — one_rep_profit","text":"","code":"one_rep_profit(n=c(100,100), N=1000, s=c(.1,.1), mu=c(.1,.1), sigma=c(.05,.05), K=2, TS=FALSE) #> perfect_info    test_roll    thom_samp        error  #>     128.9086     129.1139           NA       0.0000  one_rep_profit(n=c(100,200,300), N=1000, s=c(.1,.2,.3), mu=c(.1,.2,.3), sigma=c(.01,.03,.05), K=3, TS=FALSE) #> perfect_info    test_roll    thom_samp        error  #>     194.9662     190.0063           NA       0.0000"},{"path":"/reference/one_rep_test_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","title":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","text":"Utility function used test_size_nn_sim() simulate one set potential outcomes Returns profits possible equal sample sizes","code":""},{"path":"/reference/one_rep_test_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","text":"","code":"one_rep_test_size(n_vals, N, s, mu, sigma, K)"},{"path":"/reference/one_rep_test_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","text":"n_vals potential values n (1:(floor(N/K)-1)) N deployment population s standard deviations outcome mu means priors mean response sigma standard deviations priors mean response K number arms (treatments)","code":""},{"path":"/reference/one_rep_test_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","text":"2-column matrix values n first column profits second column","code":""},{"path":"/reference/one_rep_test_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function used in test_size_nn_sim() to simulate one set of potential outcomes\nReturns profits for all possible equal sample sizes — one_rep_test_size","text":"","code":"one_rep_test_size(1:(floor(10/2)-1), N=10, s=c(10,10), mu= 20, sigma=10, K=2) #>      n   profit #> [1,] 1 249.5363 #> [2,] 2 288.4297 #> [3,] 3 282.3753 #> [4,] 4 306.4467"},{"path":"/reference/plot_prior_effect_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","title":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","text":"Plots prior densities treatment effect (difference profit per customer)","code":""},{"path":"/reference/plot_prior_effect_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","text":"","code":"plot_prior_effect_nn(mu, sigma, abs = FALSE)"},{"path":"/reference/plot_prior_effect_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","text":"mu means prior mean response sigma standard deviations prior mean response abs whether take absolute difference, 'TRUE' 'FALSE'","code":""},{"path":"/reference/plot_prior_effect_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","text":"graph plotting prior density vs. difference profit per customer","code":""},{"path":"/reference/plot_prior_effect_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots prior densities against treatment effect (difference in profit per customer) — plot_prior_effect_nn","text":"","code":"plot_prior_effect_nn(mu=c(5,10), sigma=c(10,10), abs=FALSE)"},{"path":"/reference/plot_prior_mean_resp_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","title":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","text":"Plots prior densities mean response (profit per customer)","code":""},{"path":"/reference/plot_prior_mean_resp_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","text":"","code":"plot_prior_mean_resp_nn(mu, sigma)"},{"path":"/reference/plot_prior_mean_resp_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","text":"mu means prior mean response sigma standard deviations prior mean response","code":""},{"path":"/reference/plot_prior_mean_resp_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","text":"graph plotting prior density vs. profit per customer","code":""},{"path":"/reference/plot_prior_mean_resp_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots prior densities against mean response (profit per customer) — plot_prior_mean_resp_nn","text":"","code":"#plot_prior_mean_resp_nn(mu=c(5,10), sigma=c(10,10))"},{"path":"/reference/plot_prior_resp_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","title":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","text":"Plots prior densities response (profit per customer)","code":""},{"path":"/reference/plot_prior_resp_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","text":"","code":"plot_prior_resp_nn(s, mu, sigma)"},{"path":"/reference/plot_prior_resp_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","text":"s known standard deviations response mu means prior mean response sigma standard deviations prior mean response","code":""},{"path":"/reference/plot_prior_resp_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","text":"graph plotting prior density vs. profit per customer","code":""},{"path":"/reference/plot_prior_resp_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots prior densities against response (profit per customer) — plot_prior_resp_nn","text":"","code":"plot_prior_resp_nn(s=c(10,20), mu=c(5,10), sigma=c(10,10))"},{"path":"/reference/profit_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","title":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","text":"Computes per-customer profit test & roll 2 arms","code":""},{"path":"/reference/profit_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","text":"","code":"profit_nn(n, N, s, mu, sigma, log_n = FALSE)"},{"path":"/reference/profit_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","text":"n vector length 2 containing sample sizes N size deployment population s vector length 2 containing known standard deviations outcome mu vector length 2 containing means prior mean response sigma vector length 2 containing standard deviations prior mean response log_n whether log(n) input rather n (avoid negative solutions), 'TRUE' 'FALSE'","code":""},{"path":"/reference/profit_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","text":"per-customer profit N customers","code":""},{"path":"/reference/profit_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the per-customer profit for test & roll with 2 arms — profit_nn","text":"","code":"profit_nn(n=100, N=10000, s=.1, mu=c(.7,.5), sigma=c(.2,.2)) #> [1] 0.8104432 profit_nn(n=c(100,200), N=10000, s=.1, mu=c(.7,.5), sigma=c(.2,.2)) #> [1] 0.8093503"},{"path":"/reference/profit_nn_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","title":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","text":"Computes per-customer profit test & roll K arms","code":""},{"path":"/reference/profit_nn_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","text":"","code":"profit_nn_sim(n, N, s, mu, sigma, K = 2, TS = FALSE, R = 1000)"},{"path":"/reference/profit_nn_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","text":"n sample sizes test & roll (vector length 1 K) N deployment population s standard deviations outcome (vector length 1 K) mu means priors mean response (vector length 1 K) sigma standard deviations priors mean response (vector length 1 K) K number arms TS whether run Thomson sampling, 'TRUE' 'FALSE' R number simulation replications","code":""},{"path":"/reference/profit_nn_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","text":"list containing profit, regret, error rates","code":""},{"path":"/reference/profit_nn_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the per-customer profit for test & roll with K arms — profit_nn_sim","text":"","code":"profit_nn_sim(n=c(100,100), N=1000, s=c(.1,.1), mu=c(.1,.1), sigma=c(.05,.05)) #> Error in foreach(i = 1:R) %dopar% one_rep_profit(n, N, s, mu, sigma, K,     TS): could not find function \"%dopar%\" profit_nn_sim(n=c(100,200,300), N=1000, s=c(.1,.2,.3), mu=c(.1,.2,.3), sigma=c(.01,.03,.05), K=3, TS=FALSE, R=100) #> Error in foreach(i = 1:R) %dopar% one_rep_profit(n, N, s, mu, sigma, K,     TS): could not find function \"%dopar%\""},{"path":"/reference/profit_perfect_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","title":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","text":"Computes per-customer profit perfect information response normal symmetric normal priors","code":""},{"path":"/reference/profit_perfect_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","text":"","code":"profit_perfect_nn(mu, sigma)"},{"path":"/reference/profit_perfect_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","text":"mu means prior mean response sigma standard deviations prior mean response","code":""},{"path":"/reference/profit_perfect_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","text":"per-customer profit perfect information","code":""},{"path":"/reference/profit_perfect_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes per-customer profit with perfect information\nWhere response is normal with symmetric normal priors — profit_perfect_nn","text":"","code":"profit_perfect_nn(mu=.7, sigma=.02) #> [1] 0.7112838"},{"path":"/reference/test_eval_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides summary of a test & roll plan — test_eval_nn","title":"Provides summary of a test & roll plan — test_eval_nn","text":"Provides summary test & roll plan","code":""},{"path":"/reference/test_eval_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides summary of a test & roll plan — test_eval_nn","text":"","code":"test_eval_nn(n, N, s, mu, sigma)"},{"path":"/reference/test_eval_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides summary of a test & roll plan — test_eval_nn","text":"n vector length 2 containing sample sizes N deployment population s known standard deviations outcome mu means priors mean response sigma standard deviations priors mean response","code":""},{"path":"/reference/test_eval_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides summary of a test & roll plan — test_eval_nn","text":"data frame containing summary statistics profit per customer, profits test phase, error rates, etc.","code":""},{"path":"/reference/test_eval_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides summary of a test & roll plan — test_eval_nn","text":"","code":"test_eval_nn(n=c(100,100), N=1000, s=.1, mu=.1, sigma=.05) #>    n1  n2 profit_per_cust   profit profit_test profit_deploy profit_rand #> 1 100 100       0.1221293 122.1293          20      102.1293         100 #>   profit_perfect profit_gain     regret error_rate tie_rate #> 1       128.2095   0.7844645 0.04742351 0.06283296        0 test_eval_nn(n=c(100,200), N=1000, s=c(.1,.2), mu=c(.1,.2), sigma=c(.05,.1)) #> Error in foreach(i = 1:R) %dopar% one_rep_profit(n, N, s, mu, sigma, K,     TS): could not find function \"%dopar%\""},{"path":"/reference/test_size_nht.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","title":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","text":"Computes recommended sample sizes null hypothesis test","code":""},{"path":"/reference/test_size_nht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","text":"","code":"test_size_nht(s, d, conf = 0.95, power = 0.8, N = NULL)"},{"path":"/reference/test_size_nht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","text":"s vector length 1 (symmetric) 2 (asymmetric) indicating response standard deviations d minimum detectable difference treatments conf 1 - type error rate power 1 - type II error rate N finite deployment population, NULL finite population correction used","code":""},{"path":"/reference/test_size_nht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","text":"recommended sample sizes vector","code":""},{"path":"/reference/test_size_nht.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the recommended sample sizes for a null hypothesis test — test_size_nht","text":"","code":"test_size_nht(s=c(0.5,0.10), d=0.2, conf=0.95, power=0.8, N=NULL) #> [1] 58.86660 11.77332 test_size_nht(s=0.5, d=0.2, conf=0.95, power=0.8, N=NULL) #> [1] 98.111"},{"path":"/reference/test_size_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","title":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","text":"Computes profit-maximizing test size test & roll 2 arms (asymmetric case yet implemented)","code":""},{"path":"/reference/test_size_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","text":"","code":"test_size_nn(N, s, mu, sigma)"},{"path":"/reference/test_size_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","text":"N size deployment population s vector length 2 containing standard deviations outcome mu vector length 2 containing means prior mean response sigma","code":""},{"path":"/reference/test_size_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","text":"vector containing sample sizes","code":""},{"path":"/reference/test_size_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the profit-maximizing test size for test & roll with 2 arms\n(asymmetric case not yet implemented) — test_size_nn","text":"","code":"test_size_nn(N=10000, s=.1, mu=c(.7,.7), sigma=c(.05,.05)) #> [1] 97.04499 97.04499 test_size_nn(N=10000, s=c(.1,.2), mu=c(.7,.7), sigma=c(.05,.05)) #> [1]  97.38121 187.41676"},{"path":"/reference/test_size_nn_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","title":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","text":"Computes profit-maximizing test size profits multi-armed test & roll","code":""},{"path":"/reference/test_size_nn_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","text":"","code":"test_size_nn_sim(N, s, mu, sigma, K = 2, R = 1000)"},{"path":"/reference/test_size_nn_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","text":"N deployment population s standard deviations response (length 1(symmetric) K) mu vector length K containing means priors mean response sigma vector length K containing standard deviations priors mean response K number arms (treatments) R number simulation replications","code":""},{"path":"/reference/test_size_nn_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","text":"list sample sizes expected profit per customer","code":""},{"path":"/reference/test_size_nn_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the profit-maximizing test size and profits for a multi-armed test & roll — test_size_nn_sim","text":"","code":"test_size_nn_sim(N=1000, s=.1, mu=.1, sigma=.05, K=2, R=1000) #> Error in foreach(i = 1:R) %dopar% one_rep_test_size(n_vals, N, s, mu,     sigma, K): could not find function \"%dopar%\""}]
